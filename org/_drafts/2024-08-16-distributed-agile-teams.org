#+LANGUAGE: en
#+OPTIONS: toc:nil  broken-links:mark

#+begin_export html
---
layout: post.liquid
title:  "Distributed agile teams"
date: 2024-08-16
last_updated: 2024-08-16
tags:
  - journal
  - agile
  - teams
  - software
  - distributed
categories: [journal, software]
#permalink: /2024-08-16-distributed-agile-teams
toc: false
---
#+end_export

Can distributed teams be agile? Does Jira kill agility? Here are my
2 cents.

I was scrolling LinkedIn when I saw a picture of Jira executing a
wrestling splash on Agility. It triggered a train of thought about the
place for tools like Jira in the context of distributed teams that
span different time zones and on which the team members often have to
split their attention into multiple projects.


#+begin_export html
<div style="text-align: center">
  <img src="/assets/images/jira-splash-agility.png" style="width: 50%">
</div>
#+end_export

In my experience, as a software engineer, I have noticed that
Agile, Scrum, and Kanban are used interchangeably. This
post explorers how each has contributed to the way software projects
are organized and whether or not they are a good fit when working with
distributed teams.

These ways of work share some assumptions:

1. Colocation: everybody is the same geographical location, building,
   or even room
2. Undivided attention: each person belongs to a single team/project/product


So how can distributed teams remain agile when these two assumptions
are broken? 

Before we go into the challenges that distributed teams face, let's
take a quick look at key differences between Agile, Scrum and Kanban.

1. Origins and focus: 
   - Agile: originated in software development with a focus on
     delivery of value through close collaboration with customers and being
     flexible in responding to change
   - SCRUM: originated in software development with a focus on time-boxed
     delivery cycles (iterations) with a fixed scope
   - Kanban: originated in manufacturing with a focus on visualizing
     work, managing flow, and reducing waste
2. Work in progress:
   - Agile offers no prescriptions
   - Scrum offers no prescriptions
   - Kanban explicitly sets limits for work in progress (WIP) to avoid
     overloading the team

The fact that the terms are used interchangeably it's a reminder of
how similar the philosophies are. These ways of working are
complementary and software projects mix and match practices from all
of them without batting an eyelash.



* Does Jira kill agility?

  Tools don't kill agility, people kill agility.
  
  I find it intriguing that people with technical IT skills
  have such a hard time using a web application like JIRA and at the
  same time they can deliver complex highly-available systems, such
  as what applications, computer networks, storage systems, etc.

  Jira is bloated, complex, and not user-friendly. At the same time it
  does not impose any workflow or methodology.

  For distributed teams, systems like Jira serve as a central place for
  coordinating work. 
  
  
** Every project management tool wants to become like JIRA

   In principle, e-mail is sufficient. However, once you get used to 
   the amenities of modern collaboration tools, it's hard to go
   back and use only e-mail.

   Most popular collaboration tools seem to be converging in terms of
   features, for example, creating a task from a chat conversation,
   tracking status, assigning, visualizing tasks and their
   relationships, linking to code or documentation, etc.

   Project management and collaboration is a complex domain, which
   explains why most tools offer a terrible user experience. I always
   remind myself that it could be worse, imagine doing project
   management only with email and PowerPoint.

   Many companies arrive to systems like JIRA by taking a
   wholistic/integrated approach. It's not perfect, but the available
   options are only a round of funding away from becoming like Jira.


* Documentation is communication is documentation

  Recorded communications are documentation and documentation is
  communication. 

  For co-located teams, nothing beats face-to-face communication.
  Distributed teams can use documentation fill in the gap created by
  the lack of face-to-face communication.


** Publishing through a central channel

   Some complex tasks require sharing context with multiple people.
   Consolidating context in a central location, such as Jira/Wiki makes
   it easier to onboard newcomers.

   
** Documentation and context switching

   Distributed teams are often composed of individuals that
   participate in multiple projects simultaneously.

   Individuals who have to split their attention into multiple
   projects reduce the impact created by context switching by
   documenting useful details, such as the current status, and planned
   next steps.


  
* COMMENT Local variables

  Taken from: 
  https://emacs.stackexchange.com/a/76549/11978
  
  # Local Variables:
  # org-md-toplevel-hlevel: 2
  # End:
  


